{"pages":[],"posts":[{"title":"复试参考","text":"机器学习摸索过程，作为复试参考，记录一下好的参考博客 must be successful ！ 一、904学习参考 二、参考1.学习路线 如何在没有有效指导的情况下学习深度学习？ 2.参考书目 动手学深度学习 一个在线的电子书，全部要jupyter notebook，配有代码的形式 李航的统计学习（本地看） 3.参考视频1）统计学习 李航《统计学习方法》啃书指导 ​ 选取自B站，后面有更好的继续补充 2）机器学习（西瓜书） 机器学习西瓜书白话解读 附上一些算法的参考博客： 卷积神经网络知乎讲解​ 卷积神经网络CNN完全指南终极版（一） 卷积神经网络CNN完全指南终极版（二） 贝叶斯算法​ 带你理解朴素贝叶斯分类算法 ​ 如何理解贝叶斯定理？(要关注微信这个，不过讲的确实生动) ​ 如何通俗地理解“最大似然估计法”?(同上) 个人理解如何理解这个公式，我们来看这个图： ​ 我们所求的是：在A发生的情况下，他们的交集发生的概率； ​ 那么可以这么理解： ​ + 首先B事件发生有个概率P（B） ​ + B和A的交集概率P = B事件下A事件发生的概率 ​ + 那么将 B和A的交集概率P 除以 A发生的概率 = 发生A事件下B事件发生的概率 ​ 集成学习 手把手教你AdaBoost 一些概念： ​ 集成学习：通过构建并结合多个个体学习器 来完成学习任务； ​ 个体学习器： 通常由一个现有的学习算法（eg： 决策树，BP神经网络算法等）从训练数据产生； ​ 最终获得比单一学习器显著卓越的泛化性能 聚类","link":"/2022/03/07/%E5%A4%8D%E8%AF%95/"},{"title":"leetcode-剑指offer","text":"记一下Leetcode题踩的坑，码代码能力很久不码就很容易忘掉 最近又在用python写毕设，就决定用python刷题 2022-03-08剑指 Offer 04. 二维数组中的查找在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 思路 将二维矩阵旋转成为一个二叉排序树，然后开始从右上角遍历； 根据 target 与 martix[i][j] 比较，对 i 和 j 进行增减 12345678910111213141516171819class Solution(object): def findNumberIn2DArray(self, matrix, target): &quot;&quot;&quot; :type matrix: List[List[int]] :type target: int :rtype: bool &quot;&quot;&quot; i,j = 0,len(matrix[0])-1 while i&gt;=0 and j&lt;len(matrix[0]): if matrix[i][j] &lt; target: i += 1 elif matrix[i][j] &gt; target: j -= 1 else: return True return False 报错信息：IndexError: list index out of range 异常是 列表发生越界， 解决一开始还打印了每个步骤的值，发现结束是没啥问题的 后来想了很久，那可能是一开始出了问题？ 因为我们这里从右上角开始遍历比较，做的是减法 那么如果一开始二维数组只有一个元素呢？ —- 那么就会导致越界 我们看这里： 123456789101112131415二维数组：【3】，target = 5-------------i = 0,j = 0进入while循环 if 不满足； 进入elif： j-1 更新值 j = 0-1 = -1----------第二轮i = 0 ,j = -1(仍然满足条件)但接下来判断就会出现越界 这就是错误所在！ 而从左下角开始就刚好规避了这个问题，算是一个巧的地方 相当于一个确定左下，一个框定右上，所以自然不会越界。 同时还需注意 len(martix[0])：列数量 len(martix) ：行数量 再遇到[]会报错","link":"/2022/03/08/leetcode-record/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/07/hello-world/"},{"title":"ubuntu 安装Clash 科学上网","text":"本来用的是V2rayA，奈何每次白嫖节点都需要手动测试很麻烦，所以就想换clash 奈何这类软件对linux支持不是很好，折腾一下 Science Internet一、Clash与V2Ray的区别 V2ray ​ v2ray 目前没有自动选择节点的功能，在每次使用时我得先去测试这个节点能不能用，够不够快。但是它上手快，稳定性高，支持大部分的主流协议，更新快，也支持机场订阅链接等，能满足日常科学上网的基本需求，适合新手小白。 Clash ​ 相比与V2ray , 对于使用免费节点的来说，clash是更好的选择，它可以自己选择节点，不用自己一个个去测试。 二、ubuntu 20.04 下部署clash（失败）我之前在ubuntu下用的是V2rayA ，界面如下： 每当我需要更换节点时候，我的一个个去 选择-&gt;断开-&gt;测试，……，选择-&gt;断开-&gt;测试，既麻烦，又繁琐。 话不多说，开始正题： （1）下载地址 GitHub 地址：Clash Releases下载：https://github.com/Dreamacro/clash/releases x86-64位的选择这个linux-amd64的，这个应该不用多说 （2）解压缩打开文件目录，进行解压缩，会得到一个执行文件 右键properties——&gt;permissions,勾选 或者命令： chmod +x clash-linux-amd64 运行：./clash-linux-amd64 貌似出错了,去了Gituhb 上的issue看了看：[Bug] Start DNS server error: missing port in address 有说版本问题的，有说不影响使用的，算了先不管 （3）配置clash初始化执行 clash 会默认在 ~/.config/clash/ 目录下生成配置文件和全球IP地址库：config.yaml 和 Country.mmdb 12#看是否有配置文件ls ~/.config/clash/ 可以看看配置文件config.yaml,只有端口号 我们把官网的配置文件复制过来：配置文件地址 编辑使用gedit也行，vim也行，看个人习惯. 复制过来保存就行 12345# 切换到目录cd ~/.config/clash/#编辑配置文件sudo gedit config.yaml 回到之前目录，再次执行clash 1./clash-linux-amd64 报错了，简直无语 （4）换种方法我们仍然回到这个目录 123# 下载Country.mmdb wget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb 这里我准备好了config.yaml,我用v2ray订阅转的clash配置文件 也可也输入如下命令，去服务商给的网址下载，本地保存为config.yaml 123# 下载config.yaml [clash订阅链接]自己去找wget -O config.yaml [clash订阅链接] 指定当前目录运行 -d . 12./clash-linux-amd64 -d . 打开clash-web控制台：http://clash.razord.top/#/proxies 会发现有3个参数，前面2个保持默认，我们进行密码设置，打开config.yaml,直接复制进去就好，密码设置：123456(随意) 1234# Secret for the RESTful API (optional)# Authenticate by spedifying HTTP header `Authorization: Bearer ${secret}`# ALWAYS set a secret if RESTful API is listening on 0.0.0.0secret: &quot;123456&quot; 然后登不进去，失败告终！！有些问题，搜索了很久，没啥结果，还是换个版本，曲线救国。 三、ubuntu 20.04 下部署clash（成功）一开始想装失败了，于是换个版本：Clash for windows，据说这个目前已经支持了linux版本，还支持用 UI 界面方便随时切换。 这个 Clash For Windows 的名字乍一看有点歧义，实际上是全平台的，不是 Windows 专属的。 优点如前文所述： 支持自动选择节点，可以根据延迟自动选择，也可以根据规则 支持本地编辑规则 支持查看当前订阅的流量等信息 前面试图装的clash还只能支持命令行，需要有点功底才行，话不多说，进入正题： （1）下载地址​ Github地址：Clash for Windows Releases下载 ​ 镜像地址：https://down.gtk.pw/proxy/linux ​ （2）然后解压缩： ​ 该目录下进入终端（主要是双击点不开cfw）： ./cfw （2）官方使用手册地址（3）问题 问题1： clash端口号一直为0 手动设置为端口7890 问题2：一切都按照配置好了，为什么还是没有网络？ 还需要安装 iproute2，然后重启 1sudo apt install nftables iproute2 参考博客：https://bbs.deepin.org/en/post/229552?offset=1&amp;limit=20#reback_title 发现状态一直未激活，看了issue发现是bug，后面已经修复： 汉化补丁下载 然后重新启动cfw，发现已激活： 最后去谷歌商店下载： Proxy SwitchyOmega 设置代理，然后选中： 刷新网页，看是否有请求 不知道为啥，框出来的地方一直是0，可能是bug吧，但并不影响使用","link":"/2022/03/07/Science%20Internet/"},{"title":"我的测试","text":"月是人间散客，亦是人间清乐 问韶华，一杯真假，爱梦难懂，只是负韶华，一杯人间错，问十里情海，花红花火，只是系别错，柔情懂，只是人间错，问梨花，思念无暇，东风起，奈何泪，十里相思错，问人间一别，从此南柯一梦。","link":"/2022/03/06/mytest/"},{"title":"Ubuntu 20.04LTS 搜狗输入法不显示图标","text":"使用ubuntu以来，搜狗输入法经常失灵，所以就记录一下这次操作过程 以便往后照着操作！ 原来的输入法设置就是如上图所示，之前也好像可以用，但我更新了一下依赖和包以后就不能用了，实在不理解。 我不知道为什么有时我不能使用搜狗拼音作为我的输入法。我在谷歌搜索了一大堆，但没有什么有用的； 情况大致如此：搜狗输入法无法启动，托盘处不显示图标，哪怕显示我选择了搜狗输入法，但仍然不显示图标； 所以我想是不是fcitx出了问题，终端 重启fcitx，发现图标显示恢复正常，但当我把终端关掉以后，又变成键盘的样子。 1fcitx restart 最后，我将搜狗输入法移动到上面去后，就可以使用了，但也只有光标出现在输入的地方才能进行搜狗输入，否则仍然显示键盘图标 总感觉问题还没解决，后续再看看……","link":"/2022/03/06/Ubuntu%2020.04LTS%20%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E6%A0%87/"},{"title":"ubuntu 部署docker容器","text":"了解一下docker，并且试着把之前失败的clash，重新装一下 Docker 是什么？ 我们常说的“Docker”，指的是容器化技术，用于支持创建和使用 Linux容器； 一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux或Windows机器上； 容器是完全使用沙箱机制，相互之间不会有任何接口。几乎没有性能开销，可以很容易地在机器和数据中心运行。 为什么用Docker容器技术之前，火热的技术是虚拟机技术，而其最典型的代表就是 VMWare和OpenStack； 而Docker技术走热的原因，说白了就是“轻”，一种轻量化虚拟技术； Docker的优缺点1.启动时间虚拟机虽然可以隔离出很多子电脑，但是占用空间大，启动慢； 而容器技术不需要虚拟整个操作系统，只需要虚拟一个小规模的环境，启动速度很快，几秒就能完成。 2.性能Docker容器共享宿主机内核，系统级虚拟化，占用资源少，没有Hypervisor层开销，性能基本接近物理机； 虚拟机需要Hypervisor层支持，具有完整的GuestOS（虚拟操作系统），虚拟化开销大，因而降低性能，没有容器性能好 3.占用开销此外，它占的空间很小，容器只需要MB级甚至KB级。 虚拟机一般要几GB到几十GB的空间 4.安全性Docker容器由于共享宿主机内核，只是进程级隔离，因此隔离性和稳定性不如虚拟机，Docker容器具有一定权限访问宿主机内核，存在一定安全隐患； Docker的三大核心 镜像（Image） 容器（Container） 仓库（Repository） Docker镜像，就像一个完整的文件包，它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 容器的实质是进程，它运行与独属于自己的命名空间，类似在一个独立于宿主下的系统上操作（相当于小虚拟机），这种特性使得容器封装的应用比直接在宿主运行更加安全。 镜像构建完成后，可以很容易的在当前宿主机上运行；但是如果需要在其他服务器上使用这个镜像呢？ 这时候就需要仓库，它的工作就是用来存放、发放镜像的——也就是所说的“Docker Registry ” 简而言之：一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。 Ubuntu20.04下部署Docker环境1.安装建议直接看官方文档 卸载旧版本如果之前有安装过，建议清楚一下配置 123sudo apt-get remove dockersudo apt-get remove docker-enginesudo apt-get remove docker.io 脚本安装用APT安装比较麻烦，还要证书啥的； 而在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 --mirror 选项使用国内源进行安装： 12curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh --mirror Aliyun 我们建立一个文件夹，执行第一条命令下载脚本 然后运行脚本，并指定镜像，安装成功 建立用户组默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。 建立 docker 组： 1sudo groupadd docker 将当前用户加入 docker 组： 1sudo usermod -aG docker $USER 测试是否安装成功1docker run --rm hello-world 常用命令启动Docker 12sudo systemctl enable dockersudo systemctl start docker 关闭Docker 1sudo systemctl stop docker Docker部署clash准备配置文件：config.yaml 部署Clash核心Clash 有官方的 Docker 部署教程，以及完整的配置项说明文档。有兴趣深入了解的可以看看，咱们简单粗暴点略过 docker-compose 直接上命令 进到我们新建的文件夹： 12sudo docker run -d --name=clash -v &quot;$PWD/config.yaml:/root/.config/clash/config.yaml&quot; -p &quot;7890:7890&quot; -p &quot;9090:9090&quot; --restart=unless-stopped dreamacro/clash 图形化控制台1.在线控制台http://yacd.haishan.me/ 2.本地部署1git clone -b gh-pages https://github.com/haishanh/yacd.git 这是 yacd 作者编译好的版本，克隆下来之后用浏览器访问其中的 index.html 即可 3.docker 部署Run: docker run -p 1234:80 -d –rm haishanh/yacd 4.一点小问题本地部署yacd后，点击index.html，发现网页是空白的，按F12查看报错信息： 发现是因为谷歌浏览器不能通过本地文件的路径：file://XXX 去访问，只能通过http://xxx 的形式访问，所以报错 然后我们直接通过下面的URL：http://127.0.0.1:8887/访问就行了； 不过还是在线访问简单！！！","link":"/2022/03/06/ubuntu-docker/"},{"title":"Ubuntu 20.04LTS 文件夹图标丢失","text":"之前在安装环境和依赖的时候，不知道用了什么操作，文件夹图标就消失了？？？ 我寻思着我也没做啥，文件夹图标就丢失了，一直用命令行进行文件操作挺麻烦的。 运行命令： sudo apt install gnome-shell-extension-desktop-icons 然后重新登入、登出，就能在应用列表看到了 最后右键Add to Favorites就行了","link":"/2022/03/06/Ubuntu%2020.04LTS%20%E6%96%87%E4%BB%B6%E5%A4%B9%E5%9B%BE%E6%A0%87%E4%B8%A2%E5%A4%B1/"},{"title":"Blog部署","text":"记录一下 hexo-theme-amazing 配置历程 持续更新 ing………… 1.背景修改 问题描述 ​ 原来的背景很花，不是很喜欢，尤其是在深色模式下，加载会出现蓝蓝花花的显示，对于我个人来说不是很好 类似这样： ​ 解决方法：​ 去 hexo-theme-amazing/include/style/mystyle/base.styl文件修改： 对比我的参考： ​ ​ 删掉这个部分就好了 ​ 效果预览 ​ ​ 这样看起来就清爽很多了 2.文章折叠 问题描述 打开首页每一篇博文都是完整的展露出来，非常不适合平时的浏览习惯，类似下面这样，一展到底…… 解决办法 简单来讲就是在你撰写的文档里面添加： 类似下面这样 然后看看预览效果： 确实折叠了，但好像不咋的好看，但做法就是如此 如果写博文的，可以自己放一张图进去？ 预览效果 3.博客评论数更新 问题描述 注意这个地方的数据不是真实的 解决办法 1）新建放评论的仓库 一定为公有的！！ 然后出现如下页面； 我们先不用管，直接点击个人头像来到个人设置界面： (2)新建APP 域名前面貌似要加 http(s)，不然会报错 2）生成客户端秘钥 完成好前面步骤后，会来到如下页面 我们点击生成Client secrets，输入密码后，就能看到生成的了 （4）配置文件修改 改成我们刚刚修改的就好了 4.改中文根目录下，找到配置文件 将 en -&gt; zh-CN 就行了 · 123# 清除缓存、部署就OKhexo cleanhexo g -d 效果预览 可以看到些许地方都变成中文了，但是顶部导航栏仍然是中文，大家可以直接去主题的 config.yml 文件，手动翻译一下就好了吧 查阅了issues，作者说这里确实要手动改！！！ 5.yaml front matter1）快速开始Front-matter 是且只能是文件最上方以 --- 分隔的区域，用于指定个别文件的变量 for example，这是新建的md文档 我们在首行输入 --- -&gt; 回车； 然后就会出现了书写区域 2）参数解释以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 详细的就不说了，以后有好的参考博客，我会贴出来的 参考一：front-matter使用详解 参考二：hexo博客front-matter格式 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 3）使用效果12345678910111213141516---title: 标题date: 2022-03-05 20:00:00summary: # 文章摘要toc: truemathjax: truetop: truecover: trueimg: 'https://img-blog.csdnimg.cn/20200309120551356.png' # 设置文章背景图，设置为外链图片，访问快tags: - 标签1 - 标签2categories: - testauthor: Tlo_oh--- 我们将它部署到博客，本地预览效果 从这个效果和对比，应该可以看出哪里改动了 所以根据我个人的需要，应该这样写： 4）总结这个 img 没啥用首先，每个主题的front-matter不一样，我看了好多，建议看作者的主题配置参考：Icarus (ppoffice.github.io) 效果如下：（这里是本地引用，也可以引用图床的外链啊） 然后其余几个数学公式、置顶啥的根据需要吧； 往后的博客就按照这个格式来发布，相对来说还直观一点, 如果再浏览长篇博客的时候，可以加上toc： ture,这样在盘边就会生成目录，方便浏览 这里放一个参考：参考1 参考2 里面有讲到用插件，这个之后再折腾吧…… 6.widgets增减为了简化主页的展示，可以对这些模块进行删减，或者移动到右边去； 因为我这是刚刚开始，所以有一些暂时还没什么用 我们来到主题目录下的 _config.yml 每个 - 开始的都是一个模块，我们根据需要注释掉就行 我这里注释的是 链接 和 评论 部分（这里 - 也要一起注释，不然编译会报错） 12# 部署到服务器hexo s -d 观看效果 7.评论数（ing）F12检查 报错这个 据说华东节点用不了，于是我又改用国际版的 仍然报错 8.SEO优化SEO（搜索引擎优化）是一种通过优化网站内容来获得搜索引擎的自然搜索结果排名的实践。 简单来说就是推广，首先得让搜索引擎收录自己的网站，这样别人才能通过关键词搜索到； 刚建站的时候是没有搜索引擎收录我们的网站的。可以在如在百度搜索引擎中输入site:域名来查看一下。 百度SEO1）登录百度站长平台添加网站 2）填写信息、选择验证方式 个人感觉HTML比较简单，当然下面都有很详细的具体方法： 我的博客仓库部署在github上 3）提交资源在博客文件的根目录下执行如下命令，自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎 12npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 然后部署到github 1hexo g -d 然后可以看到目录下生成了几个文件 提交地址等待状态就好了，据说百度收录比较慢，得等个十天半个月…… Google SEO1）去Google站点地图进入Google站点地图，提交网站和sitemap.xml，就可以了。 有域名直接访问这里：Google Search Console； 不出意外的话一天内Google就能收录你的网站了。不过访问Google需要 楼梯 才能去外面的世界； 然后生成一串代码： 2）添加域名解析记录注意到这里的要求： 登录到您的域名提供商网站（比如我是阿里云买的域名，就去阿里云） 将下面的 TXT 记录复制到你的的DNS配置中 然后点击解析，添加记录 注意这里选择TXT，其余默认就好了 3）验证结果回到之前谷歌的界面，点击验证按钮进行验证，如果显示绿色的结果，代表验证成功。 如果不成功 可以等待一段时间，DNS解析需要一段时间 或者，根据上方步骤重新检查验证流程。","link":"/2022/03/05/Blog%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"杂项","slug":"杂项","link":"/tags/%E6%9D%82%E9%A1%B9/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"统计学习","slug":"统计学习","link":"/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/"},{"name":"复试","slug":"复试","link":"/tags/%E5%A4%8D%E8%AF%95/"},{"name":"刷题","slug":"刷题","link":"/tags/%E5%88%B7%E9%A2%98/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"}],"categories":[{"name":"博客搭建","slug":"博客搭建","link":"/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"Deep Learning","slug":"Deep-Learning","link":"/categories/Deep-Learning/"},{"name":"leetcode","slug":"leetcode","link":"/categories/leetcode/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"科学上网","slug":"科学上网","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]}